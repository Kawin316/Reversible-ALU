
module q_alu(
           input [15:0] A,C,B,  // ALU 8-bit Inputs                 
           input [1:0]ALU_Sel,// ALU Selection
           input cin,
           output [15:0] ALU_Out, // ALU 8-bit Output
           output [15:0] CarryOut1,CarryOut2 // Carry Out Flag
    );
    //reg [15:0] ALU_Result;
    
    wire [15 : 0] diff;
    wire [15: 0] sum;
    wire [15:0] co,p,q,x1,y1,z1,x2,y2,z2;
    reg [15: 0] sum1;
    reg [15:0] co1,co2;
   
    //wire bo;
    n_bit_fa a1(A,B,cin,sum,co);
    //mul m1(A,B,sum);
    rev_mul m1(A,B,p);
    toffoli t1(A,B,C,x1,y1,z1);
    fredkin fr1(A,B,C,x2,y2,z2);
    always @(*)
    begin
         if(ALU_Sel==2'b00)
             {sum1,co1} = {sum,co};
         else if(ALU_Sel==2'b01)
             {sum1} = {p};
         else if(ALU_Sel==2'b10)
             {sum1,co2,co1} = {z1,y1,x1};
         else if(ALU_Sel==2'b11)
             {sum1,co2,co1} = {z2,y2,x2};
    end
    assign {ALU_Out,CarryOut1,CarryOut2} = {sum1,co1,co2};

endmodule











module rev_mul(x,y,z);
input [3:0] x,y;
output [7:0] z;
wire [15:0] p;
wire [31:0] g;
wire [19:0] g1;
wire [16:0] a;
peres p0(x[0],y[0],0,g[0],g[1],p[0]);
peres p1(x[0],y[1],0,g[2],g[3],p[1]);
peres p2(x[0],y[2],0,g[4],g[5],p[2]);
peres p3(x[0],y[3],0,g[6],g[7],p[3]);
peres p4(x[1],y[0],0,g[8],g[9],p[4]);
peres p5(x[1],y[1],0,g[10],g[11],p[5]);
peres p6(x[1],y[2],0,g[12],g[13],p[6]);
peres p7(x[1],y[3],0,g[14],g[15],p[7]);
peres p8(x[2],y[0],0,g[16],g[17],p[8]);
peres p9(x[2],y[1],0,g[18],g[19],p[9]);
peres p10(x[2],y[2],0,g[20],g[21],p[10]);
peres p11(x[2],y[3],0,g[22],g[23],p[11]);
peres p12(x[3],y[0],0,g[24],g[25],p[12]);
peres p13(x[3],y[1],0,g[26],g[27],p[13]);
peres p14(x[3],y[2],0,g[28],g[29],p[14]);
peres p15(x[3],y[3],0,g[30],g[31],p[15]);


assign z[0] = p[0];
peres pm1(p[4],p[1],0,g1[0],z[1],a[0]);
dpg d1(p[8],p[5],0,p[2],g1[1],g1[2],a[1],a[2]);
dpg d2(p[12],p[9],0,p[6],g1[3],g1[4],a[3],a[4]);
peres pm2(p[13],p[10],0,g1[5],a[5],a[6]);
peres pm3(a[0],a[1],0,g1[6],z[2],a[6]);
dpg d3(a[2],p[3],0,a[3],g1[7],g1[8],a[7],a[8]);
dpg d4(a[4],p[7],0,a[5],g1[9],g1[10],a[9],a[10]);
dpg d5(a[6],p[11],0,p[14],g1[11],g1[12],a[11],a[12]);
peres pm4(a[6],a[7],0,g1[13],z[3],a[13]);
dpg d6(a[13],a[8],0,a[9],g1[14],g1[15],z[4],a[14]);
dpg d7(a[14],a[10],0,a[11],g1[16],g1[17],z[5],a[15]);
dpg d8(a[15],a[12],0,p[15],g1[18],g1[19],z[6],z[7]);
endmodule


module dpg(a,b,c,d,p,q,r,s);
input a,b,c,d;
output p,q,r,s;
assign p = a;
assign q = a^b;
assign r = a^b^d;
assign s = (a^b)&d^a&b^c;
endmodule






module peres(input A,B,C, output X,Y,Z );
assign X = A;
assign Y =A^B;
assign Z =(A&B)^C;
endmodule


module n_bit_fa(a,b,cin,sum,cout);
 input [15:0] a;
 input [15:0] b;
 input cin;
 output [15:0] cout;
 output [15:0] sum;
 fa f1(a[0],b[0],cin,sum[0],cout[15]);
 fa f2(a[1],b[1],cout[15],sum[1],cout[14]);
 fa f3(a[2],b[2],cout[14],sum[2],cout[13]);
 fa f4(a[3],b[3],cout[13],sum[3],cout[12]);
 fa f5(a[4],b[4],cout[12],sum[4],cout[11]);
 fa f6(a[5],b[5],cout[11],sum[5],cout[10]);
 fa f7(a[6],b[6],cout[10],sum[6],cout[9]);
 fa f8(a[7],b[7],cout[9],sum[7],cout[8]);
 fa f9(a[8],b[8],cout[8],sum[8],cout[7]);
 fa f10(a[9],b[9],cout[7],sum[9],cout[6]);
 fa f11(a[10],b[10],cout[6],sum[10],cout[5]);
 fa f12(a[11],b[11],cout[5],sum[11],cout[4]);
 fa f13(a[12],b[12],cout[4],sum[12],cout[3]);
 fa f14(a[13],b[13],cout[3],sum[13],cout[2]);
 fa f15(a[14],b[14],cout[2],sum[14],cout[1]);
 fa f16(a[15],b[15],cout[1],sum[15],cout[0]);
 endmodule
 
 
module fa( input A,B,Cin, output SUM,Cout 
);
Peres P1(A,B,0,G1,G2,G3);
Peres P2(G2,Cin,G3,G4,SUM,Cout);
endmodule


module toffoli( input [15:0] A,B,C, output [15:0] P,Q,R );
assign P = A;
assign Q = B;
assign R = (A&B)^C;
endmodule


module fredkin( input [15:0] A, B, C, output [15:0] X, Y, Z );
assign X = A;
assign Y =((~A)&B) ^ (A&C);
assign Z =((~A)&C) ^( A&B);
endmodule

